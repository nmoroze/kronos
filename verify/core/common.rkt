#lang racket/base

(require racket/file
         racket/runtime-path
         racket/set
         racket/string
         (prefix-in @ rosette/safe))

(require "../clock-domains.rkt"
         "../../opentitan.rkt" ; autogenerated
         (only-in "../peripheral/usb.rkt" usb-fixed-input-names)
         "../util/rosette.rkt")

(provide rom-data filtered-state filtered-state-names filtered-state-getters
         all-state-getters inputs output-getters-phase-1 output-getters-phase-2)

(define-runtime-path rom-path "../../soc/bootrom.mem")

; Do this instead of relying on top_earlgrey_i so that we don't have to
; re-synthesize every time we change the bootrom
(define rom-data
  (let* [[data (file->string rom-path)]
         [lines (string-split data "\n")]]
    (list->vector (map (lambda (s) (@bv (string->number s 16) 32)) lines))))

; theis state is filtered out of deterministic-start proof, but their
; post-deterministic start state is shown not to affect outputs in a separate
; proof
(define filtered-state '(
                         spi_device.u_rxf_ctrl.sram_wdata
                         spi_device.u_txf_ctrl.sram_rdata_q
                         spi_device.u_memory_2p.gen_srammem.u_mem.gen_mem_generic.u_impl_generic.b_rdata_o
                         ))

(define all-state-getters (names->getters main-registers))
(define filtered-state-names (filter (lambda (r) (not (member r filtered-state))) main-registers))
(define filtered-state-getters (names->getters filtered-state-names))

(define inputs
  (append '(
            ; fixed module inputs
            (scanmode_i . #f)

            ; varying module inputs
            dio_uart_rx_i
            dio_spi_device_csb_i
            dio_usbdev_sense_i
            )

          ; CDC inputs
          spi-in-to-main-registers
          spi-out-to-main-registers
          usb-to-main-registers
          ))

(define module-output-getters
  (list
   ; module outputs
   (cons 'dio_uart_tx_o    |top_earlgrey_n dio_uart_tx_o|)
   (cons 'dio_uart_tx_en_o |top_earlgrey_n dio_uart_tx_en_o|)
   (cons 'dio_spi_device_miso_en_o |top_earlgrey_n dio_spi_device_miso_en_o|)
   ))

(define spi-cdc-outputs (append main-to-spi-in-registers
                                main-to-spi-out-registers))

(define usb-cdc-outputs-phase-1 (set-subtract main-to-usb-registers usb-fixed-input-names))

(define usb-cdc-outputs-phase-2
  (append main-to-usb-registers
          '(usbdev.u_memory_2p.gen_srammem.u_mem.gen_mem_generic.u_impl_generic.mem)))

(define output-getters-phase-1 (append module-output-getters
                                       (names->getters (append spi-cdc-outputs usb-cdc-outputs-phase-1))))
(define output-getters-phase-2 (append module-output-getters
                                       (names->getters (append spi-cdc-outputs usb-cdc-outputs-phase-2))))
